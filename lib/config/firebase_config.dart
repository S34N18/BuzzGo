import 'package:firebase_core/firebase_core.dart';

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    // This will be generated by FlutterFire CLI
    // For now, we'll provide a placeholder structure
    return const FirebaseOptions(
      apiKey: 'your-api-key',
      appId: 'your-app-id',
      messagingSenderId: 'your-sender-id',
      projectId: 'your-project-id',
      // Android specific
      androidClientId: 'your-android-client-id',
      // iOS specific
      iosClientId: 'your-ios-client-id',
      iosBundleId: 'com.example.buzzgo',
    );
  }

  static FirebaseOptions get android {
    return const FirebaseOptions(
      apiKey: 'your-android-api-key',
      appId: 'your-android-app-id',
      messagingSenderId: 'your-sender-id',
      projectId: 'your-project-id',
      authDomain: 'your-project-id.firebaseapp.com',
      databaseURL: 'https://your-project-id-default-rtdb.firebaseio.com',
      storageBucket: 'your-project-id.appspot.com',
      measurementId: 'your-measurement-id',
    );
  }

  static FirebaseOptions get ios {
    return const FirebaseOptions(
      apiKey: 'your-ios-api-key',
      appId: 'your-ios-app-id',
      messagingSenderId: 'your-sender-id',
      projectId: 'your-project-id',
      authDomain: 'your-project-id.firebaseapp.com',
      databaseURL: 'https://your-project-id-default-rtdb.firebaseio.com',
      storageBucket: 'your-project-id.appspot.com',
      iosClientId: 'your-ios-client-id',
      iosBundleId: 'com.example.buzzgo',
    );
  }

  static FirebaseOptions get web {
    return const FirebaseOptions(
      apiKey: 'your-web-api-key',
      appId: 'your-web-app-id',
      messagingSenderId: 'your-sender-id',
      projectId: 'your-project-id',
      authDomain: 'your-project-id.firebaseapp.com',
      databaseURL: 'https://your-project-id-default-rtdb.firebaseio.com',
      storageBucket: 'your-project-id.appspot.com',
      measurementId: 'your-measurement-id',
    );
  }
}

// Firebase configuration helper class
class FirebaseConfig {
  static const String projectId = 'your-project-id';
  static const String apiKey = 'your-api-key';
  static const String appId = 'your-app-id';
  static const String messagingSenderId = 'your-sender-id';
  static const String authDomain = 'your-project-id.firebaseapp.com';
  static const String databaseURL = 'https://your-project-id-default-rtdb.firebaseio.com';
  static const String storageBucket = 'your-project-id.appspot.com';
  static const String measurementId = 'your-measurement-id';

  // Firestore collections
  static const String usersCollection = 'users';
  static const String eventsCollection = 'events';
  static const String categoriesCollection = 'categories';
  static const String paymentsCollection = 'payments';
  static const String notificationsCollection = 'notifications';
  static const String feedbackCollection = 'feedback';
  static const String analyticsCollection = 'analytics';

  // Storage paths
  static const String eventImagesPath = 'event_images';
  static const String userAvatarsPath = 'user_avatars';
  static const String categoryIconsPath = 'category_icons';

  // Cloud Functions
  static const String sendNotificationFunction = 'sendNotification';
  static const String processPaymentFunction = 'processPayment';
  static const String generateReportFunction = 'generateReport';
  static const String syncEventbriteFunction = 'syncEventbrite';

  // Security Rules Templates
  static const String firestoreRules = '''
    rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {
        // Users can read and write their own data
        match /users/{userId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
        
        // Events are readable by all authenticated users
        match /events/{eventId} {
          allow read: if request.auth != null;
          allow write: if request.auth != null && 
            (request.auth.uid == resource.data.organizerId || 
             get(/databases/\$(database)/documents/users/\$(request.auth.uid)).data.isAdmin == true);
        }
        
        // Categories are readable by all authenticated users
        match /categories/{categoryId} {
          allow read: if request.auth != null;
          allow write: if request.auth != null && 
            get(/databases/\$(database)/documents/users/\$(request.auth.uid)).data.isAdmin == true;
        }
        
        // Payments are only accessible by the user who made them
        match /payments/{paymentId} {
          allow read, write: if request.auth != null && 
            request.auth.uid == resource.data.userId;
        }
        
        // Admin-only collections
        match /analytics/{document} {
          allow read, write: if request.auth != null && 
            get(/databases/\$(database)/documents/users/\$(request.auth.uid)).data.isAdmin == true;
        }
      }
    }
  ''';

  static const String storageRules = '''
    rules_version = '2';
    service firebase.storage {
      match /b/{bucket}/o {
        // Users can upload their own avatars
        match /user_avatars/{userId}/{allPaths=**} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
        
        // Event organizers can upload event images
        match /event_images/{eventId}/{allPaths=**} {
          allow read: if request.auth != null;
          allow write: if request.auth != null && 
            (request.auth.uid == firestore.get(/databases/(default)/documents/events/\$(eventId)).data.organizerId ||
             firestore.get(/databases/(default)/documents/users/\$(request.auth.uid)).data.isAdmin == true);
        }
        
        // Admin-only category icons
        match /category_icons/{allPaths=**} {
          allow read: if request.auth != null;
          allow write: if request.auth != null && 
            firestore.get(/databases/(default)/documents/users/\$(request.auth.uid)).data.isAdmin == true;
        }
      }
    }
  ''';

  // Environment-specific configurations
  static bool get isDevelopment => const String.fromEnvironment('ENVIRONMENT') == 'development';
  static bool get isProduction => const String.fromEnvironment('ENVIRONMENT') == 'production';
  
  static String get environmentPrefix => isDevelopment ? 'dev_' : '';
  
  // Get collection name with environment prefix
  static String getCollectionName(String collection) {
    return '$environmentPrefix$collection';
  }
}